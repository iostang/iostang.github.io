<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>唐先森的技术博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-16T15:19:25.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>TonyTong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>配置Jenkins for iOS 记录一些问题点</title>
    <link href="http://yoursite.com/2016/09/26/%E9%85%8D%E7%BD%AEJenkins-for-iOS-%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%82%B9/"/>
    <id>http://yoursite.com/2016/09/26/配置Jenkins-for-iOS-记录一些问题点/</id>
    <published>2016-09-26T09:24:46.000Z</published>
    <updated>2016-11-16T15:19:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-源码管理"><a href="#1-源码管理" class="headerlink" title="1 源码管理"></a>1 源码管理</h2><ul>
<li><p>Git源码管理问题    </p>
<pre><code>Repository URL    添加完git地址之后需要再添加一个ssh的私钥
</code></pre></li>
<li><p>超时问题：</p>
<pre><code>将Timeout (in minutes) for clone and fetch operations噶为60 默认为10 如果项目大的话可能会超时
</code></pre></li>
</ul>
<p><img src="/images/sourceManager.png" alt=""></p>
<h2 id="2-构建触发器"><a href="#2-构建触发器" class="headerlink" title="2 构建触发器"></a>2 构建触发器</h2><ul>
<li><p>这一步比较简单 按固定格式填写就行</p>
<pre><code>比如：
 Build periodically H 20 * * *
 Poll SCM H/5 * * * *
</code></pre></li>
</ul>
<p><img src="/images/BuildTrigger.png" alt="">        </p>
<h2 id="3-构建环境"><a href="#3-构建环境" class="headerlink" title="3 构建环境"></a>3 构建环境</h2><ul>
<li>这个需要配置证书和描述文件 以及输出路径  配置证书这部分就不细说了 网上很多资料</li>
</ul>
<p><img src="/images/BuildEnv.png" alt="">    </p>
<ul>
<li><p><a href="http://www.jianshu.com/p/41ecb06ae95f" target="_blank" rel="external">手把手教你利用Jenkins持续集成iOS项目</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/a501153c9d59" target="_blank" rel="external">CI第一篇:Jenkins+github-&gt;fir.im/蒲公英pgyer.com</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/12e445c0d4ee" target="_blank" rel="external">CI第二篇 集成项目(SVN)workspace编译生成ipa到fir-蒲公英(jenkins)</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/a17167274463" target="_blank" rel="external">Jenkins+GitHub+Xcode+fir搭了一个持续集成环境</a></p>
</li>
</ul>
<h2 id="4-构建"><a href="#4-构建" class="headerlink" title="4 构建"></a>4 构建</h2><ul>
<li><p>有一个小坑 </p>
<p>  针对非cocoapods项目 就是如果你的项目结构比较复杂 在build的时候可能会出现error</p>
<pre><code>xcodebuild: error: &apos;/Users/Shared/Jenkins/Home/jobs/Jiuai/workspace/YouXian/YouXian&apos; is not a project file.
</code></pre><p>  这个问题是由于你    Xcode Project File 这个选项没有指定xcodeproj导致的 将Xcode Project File设置成你的xcodeproj文件路径</p>
<pre><code>${WORKSPACE}/YouXian/YouXian.xcodeproj
</code></pre></li>
</ul>
<p><img src="/images/Advanced Xcode build options.png" alt=""></p>
<h2 id="5-构建后操作"><a href="#5-构建后操作" class="headerlink" title="5 构建后操作"></a>5 构建后操作</h2><ul>
<li>生成ipa之后可以利用fir或者pgyer上传 填好Token就行了</li>
<li>要是有能力写脚本也行</li>
</ul>
<h2 id="6-The-following-build-commands-failed-Check-dependencies"><a href="#6-The-following-build-commands-failed-Check-dependencies" class="headerlink" title="6 The following build commands failed: Check dependencies"></a>6 The following build commands failed: Check dependencies</h2><ul>
<li><p>Jenkins 集成Xcode 项目的时候在证书上遇到了问题</p>
<pre><code>Check dependencies
 Code Sign error: No codesigning identities found: No codesigning identities (i.e. certificate and private key pairs)          that     
 match the provisioning profile specified in your build settings (“qingyunDeveloper”) were found.
</code></pre></li>
<li><p>如果遇到类似的错误 解决办法：</p>
<pre><code>1 打开keychain keys 找到apple 的开发者证书。然后复制。 
 2 选择左边的系统（system）把刚复制的证书放进去。
</code></pre></li>
<li><p>如果这个还没有解决 接下来第二步：</p>
<pre><code>1 找到你用户下的Provisioning Profiles 文件。目录为 /Users/xxx/Library/MobileDevice/Provisioning Profiles  
 xxx表示你自己的用户名
 2 把这里面所有的证书复制到/Users/Shared/Jenkins/Library/MobileDevice/Provisioning Profile 这个文件夹下
</code></pre></li>
</ul>
<ul>
<li><p>最后提示</p>
<pre><code>iPhone.build/ProjectCos.xcent /Users/chenqing/Sqy/iOSProject/cyou/Svn/Cos/CosXCode_lxh/build/ProjectCos.app

 ** BUILD SUCCEEDED **

 Finished: SUCCESS
</code></pre><p>  <a href="http://www.cnblogs.com/qingjoin/p/3929493.html" target="_blank" rel="external">链接： Jenkins Xcode 证书设置错误 Code Sign error: No matching codesigning identity found: No codesigning identities
</a></p>
</li>
</ul>
<h2 id="7-注意点"><a href="#7-注意点" class="headerlink" title="7 注意点"></a>7 注意点</h2><ul>
<li><p>关于证书问题还有一个注意点 </p>
<pre><code>如果你是一个测试项目 
 在本地配置好证书和描述文件后一定要上传到github或者服务器上 
 然后在进行构建 否则肯定会构建失败的  
 因为jenkins是拉取你远端代码仓库的最新代码 
 如果只在本地配置不上传 必然构建失败 
 这也是一个比较基础的问题 
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-源码管理&quot;&gt;&lt;a href=&quot;#1-源码管理&quot; class=&quot;headerlink&quot; title=&quot;1 源码管理&quot;&gt;&lt;/a&gt;1 源码管理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Git源码管理问题    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Repository URL  
    
    </summary>
    
    
      <category term="Jenkins" scheme="http://yoursite.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 利用Github管理博客</title>
    <link href="http://yoursite.com/2016/08/26/Hexo-%E5%88%A9%E7%94%A8Github%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/08/26/Hexo-利用Github管理你的博客/</id>
    <published>2016-08-26T10:49:55.000Z</published>
    <updated>2016-08-26T10:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-利用Github管理博客"><a href="#Hexo-利用Github管理博客" class="headerlink" title="Hexo 利用Github管理博客"></a>Hexo 利用Github管理博客</h1><h3 id="1-搭建流程"><a href="#1-搭建流程" class="headerlink" title="1 搭建流程"></a>1 搭建流程</h3><blockquote>
<p>配置环境<br>安装homebrew node.js git<br>申请Github<br>算了这些就不写了。。。</p>
</blockquote>
<ol>
<li>在github上创建一个repo 起名必须规范 不用使用大写字母 像这样：<a href="https://iostang.github.io" target="_blank" rel="external">iostang.github.io</a></li>
<li>创建两个分支 master · hexo</li>
<li>设置hexo为默认分支</li>
<li>使用git clone git@github.com:iostang/iostang.github.io.git 存放在自己想要管理博客的文件夹</li>
<li><p>在该目录下 依次使用</p>
<pre><code>sudo npm install -g hexo
hexo init
npm install 
npm install hexo-deployer-git --save
</code></pre></li>
<li><p>修改_config.yml中的deploy参数</p>
<pre><code>deploy:
type: git
repo: git@github.com:iostang/iostang.github.io.git
branch: master
</code></pre></li>
<li><p>hexo g 生成网站文件</p>
</li>
<li><p>hexo s 这个时候就可以在本地查看博客了<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000</a></p>
<p> 这个时候再点击<a href="http://localhost:4000，正常情况下应该是最原始的画面，但是我看到的是：" target="_blank" rel="external">http://localhost:4000，正常情况下应该是最原始的画面，但是我看到的是：</a><br> 白板和Cannot GET / 几个字</p>
<p> 原因：由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：</p>
<pre><code>npm install hexo-renderer-ejs --save
npm install hexo-renderer-stylus --save
npm install hexo-renderer-marked --save
</code></pre><p> <strong>再次执行hexo g · hexo s</strong></p>
</li>
<li><p>依次执行 git add . git commit -m “balabala” git push origin hexo 提交相关文件到hexo分支</p>
</li>
<li>使用hexo g -d 生成网站并部署到github 注意提交到master分支上</li>
</ol>
<h3 id="2-日常维护"><a href="#2-日常维护" class="headerlink" title="2 日常维护"></a>2 日常维护</h3><p>如果想写新的博客或者修改博客 你可以按照这个流程</p>
<pre><code>1. hexo n &quot;这是新博客的标题&quot;
2. hexo g
3. hexo s
4. git add .
5. git commit -m &quot;balabala&quot;
6. git pull origin hexo 
7. git push origin hexo
8. hexo d
</code></pre><p><strong>ok 这个时候新博客已经部署到Github仓库了</strong></p>
<h3 id="3-如何管理"><a href="#3-如何管理" class="headerlink" title="3 如何管理"></a>3 如何管理</h3><p>那如果我有多台电脑 该如何管理你的博客呢？</p>
<pre><code>1. git clone git@github.com:iostang/iostang.github.io.git
2. sudo npm install -g hexo
3. npm install hexo-renderer-ejs --save
4. npm install hexo-renderer-stylus --save
5. npm install hexo-renderer-marked --save
6. npm install hexo-deployer-git --save
</code></pre><p>千万不要执行<strong>hexo init</strong>这条指令 否则会覆盖_config.yml</p>
<h3 id="4-博客主题"><a href="#4-博客主题" class="headerlink" title="4 博客主题"></a>4 博客主题</h3><ul>
<li>有了博客 当然想要一个风格好看你的主题 你可以去<a href="https://hexo.io/themes/" target="_blank" rel="external">这里</a>下载你喜欢的主题</li>
<li><p>也可以使用<a href="https://github.com/pinggod/hexo-theme-apollo" target="_blank" rel="external">这个</a> 个人还蛮喜欢这种风格</p>
<pre><code>npm install
npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive
git clone https://github.com/pinggod/hexo-theme-apollo.git themes/apollo
</code></pre></li>
<li><p>修改 _config.yml 的 theme 配置项为 apollo:</p>
<pre><code>theme: apollo
</code></pre></li>
</ul>
<p>主题里面的内容就需要自己去配置了 比如微博账号</p>
<ul>
<li>安装主题有一个小问题就是 在你提交到Github的时候 你需要先把该主题目录下的.git文件删掉 不然提交不上去</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-利用Github管理博客&quot;&gt;&lt;a href=&quot;#Hexo-利用Github管理博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo 利用Github管理博客&quot;&gt;&lt;/a&gt;Hexo 利用Github管理博客&lt;/h1&gt;&lt;h3 id=&quot;1-搭建流
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>新Mac 记一次修改shadowsocks过程</title>
    <link href="http://yoursite.com/2016/08/25/%E6%96%B0Mac-%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BF%AE%E6%94%B9shadowsocks%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/08/25/新Mac-记一次修改shadowsocks过程/</id>
    <published>2016-08-25T10:29:55.000Z</published>
    <updated>2016-11-16T15:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> <strong>记住 确认是否已经登录服务器了 以下操作基本都是基于登录状态</strong> </p>
</blockquote>
<h3 id="1-使用ssh生成秘钥"><a href="#1-使用ssh生成秘钥" class="headerlink" title="1.使用ssh生成秘钥"></a>1.使用ssh生成秘钥</h3><pre><code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;
</code></pre><ul>
<li>然后会提示输入密钥的名字 比如输入 oktang</li>
<li>注意要避免重复命名</li>
<li>还要求输入私钥密码 password</li>
</ul>
<h3 id="2-配置本地ssh登录-需要修改config文件-添加服务器-用户名和端口信息"><a href="#2-配置本地ssh登录-需要修改config文件-添加服务器-用户名和端口信息" class="headerlink" title="2.配置本地ssh登录 需要修改config文件 添加服务器 用户名和端口信息"></a>2.配置本地ssh登录 需要修改config文件 添加服务器 用户名和端口信息</h3><pre><code>Host vultr
     HostName 0.0.0.0 //自己的服务器地址
     User user  //服务器用户名
     Port 1080  //连接服务器的端口
     IdentityFile ~/.ssh/oktang //私钥路径
</code></pre><h3 id="3-将这个公钥oktang-pub添加到服务器上的authorization-keys中"><a href="#3-将这个公钥oktang-pub添加到服务器上的authorization-keys中" class="headerlink" title="3.将这个公钥oktang.pub添加到服务器上的authorization.keys中"></a>3.将这个公钥<em>oktang.pub</em>添加到服务器上的authorization.keys中</h3><ul>
<li>authorization.keys这个文件如果没有就新生成一个</li>
<li><p>使用ssh登录到服务器</p>
<pre><code>ssh oktang
 cd ~/.ssh
 vi authorized_keys
</code></pre></li>
<li><p>将之前生成的公钥内容拷贝到authorized_keys中</p>
</li>
<li>ok</li>
</ul>
<h3 id="4-如果需要修改端口-使用ssh登录服务器"><a href="#4-如果需要修改端口-使用ssh登录服务器" class="headerlink" title="4.如果需要修改端口 使用ssh登录服务器"></a>4.如果需要修改端口 使用ssh登录服务器</h3><p>修改shadow socks中的端口 或者密码什么的</p>
<pre><code>vi /etc/shadowsocks.json

 {
     &quot;server&quot;:&quot;0.0.0.0”, //这里不用绑定你的服务器
     &quot;server_port”:port, //这个是shadow socks端口 到时候客户端需要用的
     &quot;local_address&quot;: &quot;127.0.0.1&quot;,
     &quot;local_port&quot;:1080,
     &quot;password”:&quot;password”,//shadowsocks密码
     &quot;timeout&quot;:300,
     &quot;method&quot;:&quot;aes-256-cfb&quot;,
     &quot;fast_open&quot;: false
 }
</code></pre><ul>
<li><p>修改“server_port”:12345 即可</p>
</li>
<li><p>修改登录端口</p>
<pre><code>cd /etc/ssh

 vi sshd_config 
</code></pre></li>
<li><p>修改sshd_config中的Port端口 这个端口需要和ssh登录的端口一致 如果不一致ssh将会登录不了</p>
</li>
</ul>
<h3 id="5-配置完成后-可以添加shadowsocks环境"><a href="#5-配置完成后-可以添加shadowsocks环境" class="headerlink" title="5.配置完成后 可以添加shadowsocks环境"></a>5.配置完成后 可以添加shadowsocks环境</h3><h4 id="在已经登录服务器的情况下-执行"><a href="#在已经登录服务器的情况下-执行" class="headerlink" title=" 在已经登录服务器的情况下 执行 "></a><strong> 在已经登录服务器的情况下 执行 </strong></h4><pre><code>sudo pip install shadowsocks
</code></pre><p><strong> 在没有/etc/shadowsocks.json配置文件的情况下  </strong></p>
<pre><code>ssserver -h //查看所有参数

 ssserver -p 443 -k password -m aes-256-cfb //前台运行，443为服务器端口，password为密码，修改这两项即可

 sudo ssserver -p 443 -k password -m aes-256-cfb --user nobody -d start //后台运行方法，修改同上

 sudo ssserver -d stop //停止运行

 sudo less /var/log/shadowsocks.log //检查日志
</code></pre><p><strong> vi /etc/shadowsocks.json </strong></p>
<pre><code>{
    &quot;server&quot;:&quot;my_server_ip&quot;,
    &quot;server_port&quot;:8388,
    &quot;local_address&quot;: &quot;127.0.0.1&quot;,
    &quot;local_port&quot;:1080,
    &quot;password&quot;:&quot;mypassword&quot;,
    &quot;timeout&quot;:300,
    &quot;method&quot;:&quot;aes-256-cfb&quot;,
    &quot;fast_open&quot;: false
}

    ssserver -c /etc/shadowsocks.json //前台运行

    ssserver -c /etc/shadowsocks.json -d start //后台运行

    ssserver -c /etc/shadowsocks.json -d stop //停止
</code></pre><h3 id="6-几项检查命令-和一些error"><a href="#6-几项检查命令-和一些error" class="headerlink" title="6 几项检查命令 和一些error"></a>6 几项检查命令 和一些error</h3><pre><code>netstat -antpl|grep -i listen //查看服务器运行状态

 chmod 600 ~/.ssh/authorized_keys //记住要设置文件为可读可写rw

 ll ~/.ssh //查看文件的权限
</code></pre><p> <strong>[Error 98] Address already in use</strong></p>
<pre><code>这个error应该是端口被占用了 修改shadowsocks.json中的端口

 切记shadowsocks.json中的端口不要和ssh登录端口一样 这是不一样的
</code></pre><p><strong>Permission denied(publishkey,gssapi-keyex,gssapi-with-mic)</strong></p>
<pre><code>使用ssh登录服务器报错 这个错误是公钥没有添加在authorized_keys中 

 加进去就行
</code></pre><h3 id="7-如果以上都成功了-还不能翻墙"><a href="#7-如果以上都成功了-还不能翻墙" class="headerlink" title="7 如果以上都成功了 还不能翻墙"></a>7 如果以上都成功了 还不能翻墙</h3><pre><code>请先检查一下自己是否开启了shadowsocks翻墙了 如果有关掉 然后重试
 玩的开心
 WTF GFW
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;记住 确认是否已经登录服务器了 以下操作基本都是基于登录状态&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-使用ssh生成秘钥&quot;&gt;&lt;a href=&quot;#1-使用ssh生成秘钥&quot; class=&quot;heade
    
    </summary>
    
    
      <category term="shadowsocks" scheme="http://yoursite.com/tags/shadowsocks/"/>
    
  </entry>
  
</feed>
