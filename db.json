{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"source/images/BuildTrigger.png","path":"images/BuildTrigger.png","modified":0,"renderable":0},{"_id":"source/images/sourceManager.png","path":"images/sourceManager.png","modified":0,"renderable":0},{"_id":"source/images/Advanced Xcode build options.png","path":"images/Advanced Xcode build options.png","modified":0,"renderable":0},{"_id":"source/images/BuildEnv.png","path":"images/BuildEnv.png","modified":0,"renderable":0},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":0,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1479312441000},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1479312279000},{"_id":"themes/apollo/README.md","hash":"fb6fbe42172a35cbdaa540a777cc4bc02add2278","modified":1479312279000},{"_id":"themes/apollo/_config.yml","hash":"2ef54de30f96194c4f14f580ac3910d7ef6cbba0","modified":1479312279000},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1479312279000},{"_id":"themes/apollo/package.json","hash":"4d13f5f859db7d008f49251543a8f610b2ecabd5","modified":1479312279000},{"_id":"source/_posts/新Mac-记一次修改shadowsocks过程.md","hash":"984cb4c5973b181756826ba42f79d654f36f1de6","modified":1479312279000},{"_id":"source/_posts/Hexo-利用Github管理你的博客.md","hash":"1fbf7036a98ef32c417215f9c024951ddb38f251","modified":1479312279000},{"_id":"source/_posts/配置Jenkins-for-iOS-记录一些问题点.md","hash":"065bba6b2f6a081cd6f01d07e3d0754d6e9c74ce","modified":1479312279000},{"_id":"themes/apollo/doc/doc-en.md","hash":"d6d9756b2085cdd8ee51eb5594427e2abf170e94","modified":1479312279000},{"_id":"themes/apollo/doc/doc-zh.md","hash":"d43c1f6bff66426744a2c6f031d19ff09cdeb2d1","modified":1479312279000},{"_id":"themes/apollo/languages/en.yml","hash":"40292f2a48e4e6361132033a47c516cb33127b6c","modified":1479312279000},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"9e4b03e14c094000257ea254fd660dde4c7af63c","modified":1479312279000},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1479312279000},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1479312279000},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1479312279000},{"_id":"themes/apollo/source/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1479312279000},{"_id":"source/images/BuildTrigger.png","hash":"c8bcdd0ab480f5c011f8ac0aefc8597999933953","modified":1479312279000},{"_id":"source/images/sourceManager.png","hash":"a1a99f463d4cbe903653b6b56b93744db5bb21b0","modified":1479312279000},{"_id":"source/images/Advanced Xcode build options.png","hash":"5216931702228f9f52b2b67cf0ff80eed7243213","modified":1479312279000},{"_id":"source/images/BuildEnv.png","hash":"f8134ffbec9d0c385224f41b55a7a0f2c3e32de7","modified":1479312279000},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1479312279000},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1479312279000},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1479312279000},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"cd9447e9b0ad22213e6a17d9a9b948f9f998f921","modified":1479312279000},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"eb15573ff66bdbb110ac77cf360b740170cee738","modified":1479312279000},{"_id":"themes/apollo/layout/partial/head.jade","hash":"d062dafabfe65198e5cf2ddb0e47d909885aa950","modified":1479312279000},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"c35d3061da4b053b73150d9741c542d660798270","modified":1479312279000},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"cf3339de8979b5f75a3011f0f6b5451091b77dc8","modified":1479312279000},{"_id":"themes/apollo/source/css/apollo.css","hash":"2cfd049bcbad8a9a68c13299a92e993d5c92d029","modified":1479312279000},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1479312279000},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1479312279000},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"153bbf882c1f6f65bb4510999b51812e20016ca7","modified":1479312279000},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1479312279000},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"fe20c16c18ab76b843d0aab2e1a5cc4f5d6d64c7","modified":1479312279000},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1479312279000},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1479312279000},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1479312279000},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1479312279000},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"b5eb0fb35fb275cbb6452b5d98702d461af3e6d5","modified":1479312279000},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1479312279000},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"ae780828148f79e5069b480e3576f1fea1246866","modified":1479312279000},{"_id":"public/atom.xml","hash":"149d4ebe33e97b426f0dc7e20f73318abd0a955c","modified":1479312607197},{"_id":"public/sitemap.xml","hash":"902c383d3fa46c74abf209a051939e8d9ce4f519","modified":1479312607198},{"_id":"public/2016/09/26/配置Jenkins-for-iOS-记录一些问题点/index.html","hash":"cc9ef660a8ca3893dd3e9ee71ab735d9656978fa","modified":1479312734854},{"_id":"public/2016/08/26/Hexo-利用Github管理你的博客/index.html","hash":"f8c78742d653048f2f8dd6296d288c4144c8ba8a","modified":1479312734854},{"_id":"public/2016/08/25/新Mac-记一次修改shadowsocks过程/index.html","hash":"17de80647745b1b66b3b4f72b2ab39aa8e7a3f5e","modified":1479312734854},{"_id":"public/archives/index.html","hash":"cf1abc697367e2f0b90588a4079acbc13a1f697e","modified":1479312607201},{"_id":"public/archives/2016/index.html","hash":"cf1abc697367e2f0b90588a4079acbc13a1f697e","modified":1479312607201},{"_id":"public/archives/2016/08/index.html","hash":"04c30322f9e81c7b7f56fffe2a2e73030dd8da6b","modified":1479312607201},{"_id":"public/archives/2016/09/index.html","hash":"f9207e7515531ac3b89a71981b7fa4e80e24564d","modified":1479312607201},{"_id":"public/index.html","hash":"f710feabec006a3712cddf6baf95a58ed1baa611","modified":1479312734854},{"_id":"public/tags/shadowsocks/index.html","hash":"619fe16e05e1decfe4ac24439f2a519088b48d64","modified":1479312607201},{"_id":"public/tags/Hexo/index.html","hash":"fdc7476ece2adbe81a46cdfc59dff25ba351e2d4","modified":1479312607202},{"_id":"public/tags/Jenkins/index.html","hash":"f9207e7515531ac3b89a71981b7fa4e80e24564d","modified":1479312607202},{"_id":"public/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1479312607207},{"_id":"public/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1479312607207},{"_id":"public/scss/apollo.scss","hash":"153bbf882c1f6f65bb4510999b51812e20016ca7","modified":1479312607207},{"_id":"public/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1479312607207},{"_id":"public/images/BuildTrigger.png","hash":"c8bcdd0ab480f5c011f8ac0aefc8597999933953","modified":1479312607209},{"_id":"public/images/sourceManager.png","hash":"a1a99f463d4cbe903653b6b56b93744db5bb21b0","modified":1479312607209},{"_id":"public/css/apollo.css","hash":"2cfd049bcbad8a9a68c13299a92e993d5c92d029","modified":1479312607211},{"_id":"public/images/Advanced Xcode build options.png","hash":"5216931702228f9f52b2b67cf0ff80eed7243213","modified":1479312607211},{"_id":"public/images/BuildEnv.png","hash":"f8134ffbec9d0c385224f41b55a7a0f2c3e32de7","modified":1479312607211}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"新Mac 记一次修改shadowsocks过程","date":"2016-08-25T10:29:55.000Z","_content":">  **记住 确认是否已经登录服务器了 以下操作基本都是基于登录状态** \n\n### 1.使用ssh生成秘钥\n\n\n     ssh-keygen -t rsa -C \"your_email@example.com\"\n     \n     \n* 然后会提示输入密钥的名字 比如输入 oktang\n* 注意要避免重复命名\n* 还要求输入私钥密码 password\n\n### 2.配置本地ssh登录 需要修改config文件 添加服务器 用户名和端口信息\n\n     Host vultr\n          HostName 0.0.0.0 //自己的服务器地址\n          User user  //服务器用户名\n          Port 1080  //连接服务器的端口\n          IdentityFile ~/.ssh/oktang //私钥路径\n\n### 3.将这个公钥*oktang.pub*添加到服务器上的authorization.keys中\n     \n* authorization.keys这个文件如果没有就新生成一个\n* 使用ssh登录到服务器\n\t\t\n\t\tssh oktang\n\t\t cd ~/.ssh\n\t     vi authorized_keys\n\t    \n* 将之前生成的公钥内容拷贝到authorized_keys中\n* ok\n\n### 4.如果需要修改端口 使用ssh登录服务器\n\n修改shadow socks中的端口 或者密码什么的\n\n    vi /etc/shadowsocks.json\n    \n     {\n         \"server\":\"0.0.0.0”, //这里不用绑定你的服务器\n         \"server_port”:port, //这个是shadow socks端口 到时候客户端需要用的\n         \"local_address\": \"127.0.0.1\",\n         \"local_port\":1080,\n         \"password”:\"password”,//shadowsocks密码\n         \"timeout\":300,\n         \"method\":\"aes-256-cfb\",\n         \"fast_open\": false\n     }\n     \n* 修改“server_port”:12345 即可\n\n* 修改登录端口\n\n\t\tcd /etc/ssh\n\t\t\n\t     vi sshd_config \n\t    \n* 修改sshd_config中的Port端口 这个端口需要和ssh登录的端口一致 如果不一致ssh将会登录不了\n\n\n### 5.配置完成后 可以添加shadowsocks环境\n\n\n#### ** 在已经登录服务器的情况下 执行 **\n\n\n\n\t\tsudo pip install shadowsocks\n\t\n\n** 在没有/etc/shadowsocks.json配置文件的情况下  **\n\n\t\tssserver -h //查看所有参数\n\n\t\t ssserver -p 443 -k password -m aes-256-cfb //前台运行，443为服务器端口，password为密码，修改这两项即可\n\n\t\t sudo ssserver -p 443 -k password -m aes-256-cfb --user nobody -d start //后台运行方法，修改同上\n\n\t\t sudo ssserver -d stop //停止运行\n\n\t\t sudo less /var/log/shadowsocks.log //检查日志\n\t\n** vi /etc/shadowsocks.json **\n\t\n\t{\n\t    \"server\":\"my_server_ip\",\n\t    \"server_port\":8388,\n\t    \"local_address\": \"127.0.0.1\",\n\t    \"local_port\":1080,\n\t    \"password\":\"mypassword\",\n\t    \"timeout\":300,\n\t    \"method\":\"aes-256-cfb\",\n\t    \"fast_open\": false\n    }\n\t    \n\t\tssserver -c /etc/shadowsocks.json //前台运行\n\n\t\tssserver -c /etc/shadowsocks.json -d start //后台运行\n\n\t\tssserver -c /etc/shadowsocks.json -d stop //停止\n\n\n### 6 几项检查命令 和一些error\n\t netstat -antpl|grep -i listen //查看服务器运行状态\n\n\t  chmod 600 ~/.ssh/authorized_keys //记住要设置文件为可读可写rw\n\t\n      ll ~/.ssh //查看文件的权限\n\t\n **[Error 98] Address already in use**\n \n\t 这个error应该是端口被占用了 修改shadowsocks.json中的端口\n\t \n\t  切记shadowsocks.json中的端口不要和ssh登录端口一样 这是不一样的\n\t \n**Permission denied(publishkey,gssapi-keyex,gssapi-with-mic)**\n\n\t使用ssh登录服务器报错 这个错误是公钥没有添加在authorized_keys中 \n\t\n     加进去就行\n\n### 7 如果以上都成功了 还不能翻墙 \n    请先检查一下自己是否开启了shadowsocks翻墙了 如果有关掉 然后重试\n     玩的开心\n     WTF GFW\n\n","source":"_posts/新Mac-记一次修改shadowsocks过程.md","raw":"---\ntitle: 新Mac 记一次修改shadowsocks过程\ndate: 2016-08-25 18:29:55\ntags: shadowsocks\n---\n>  **记住 确认是否已经登录服务器了 以下操作基本都是基于登录状态** \n\n### 1.使用ssh生成秘钥\n\n\n     ssh-keygen -t rsa -C \"your_email@example.com\"\n     \n     \n* 然后会提示输入密钥的名字 比如输入 oktang\n* 注意要避免重复命名\n* 还要求输入私钥密码 password\n\n### 2.配置本地ssh登录 需要修改config文件 添加服务器 用户名和端口信息\n\n     Host vultr\n          HostName 0.0.0.0 //自己的服务器地址\n          User user  //服务器用户名\n          Port 1080  //连接服务器的端口\n          IdentityFile ~/.ssh/oktang //私钥路径\n\n### 3.将这个公钥*oktang.pub*添加到服务器上的authorization.keys中\n     \n* authorization.keys这个文件如果没有就新生成一个\n* 使用ssh登录到服务器\n\t\t\n\t\tssh oktang\n\t\t cd ~/.ssh\n\t     vi authorized_keys\n\t    \n* 将之前生成的公钥内容拷贝到authorized_keys中\n* ok\n\n### 4.如果需要修改端口 使用ssh登录服务器\n\n修改shadow socks中的端口 或者密码什么的\n\n    vi /etc/shadowsocks.json\n    \n     {\n         \"server\":\"0.0.0.0”, //这里不用绑定你的服务器\n         \"server_port”:port, //这个是shadow socks端口 到时候客户端需要用的\n         \"local_address\": \"127.0.0.1\",\n         \"local_port\":1080,\n         \"password”:\"password”,//shadowsocks密码\n         \"timeout\":300,\n         \"method\":\"aes-256-cfb\",\n         \"fast_open\": false\n     }\n     \n* 修改“server_port”:12345 即可\n\n* 修改登录端口\n\n\t\tcd /etc/ssh\n\t\t\n\t     vi sshd_config \n\t    \n* 修改sshd_config中的Port端口 这个端口需要和ssh登录的端口一致 如果不一致ssh将会登录不了\n\n\n### 5.配置完成后 可以添加shadowsocks环境\n\n\n#### ** 在已经登录服务器的情况下 执行 **\n\n\n\n\t\tsudo pip install shadowsocks\n\t\n\n** 在没有/etc/shadowsocks.json配置文件的情况下  **\n\n\t\tssserver -h //查看所有参数\n\n\t\t ssserver -p 443 -k password -m aes-256-cfb //前台运行，443为服务器端口，password为密码，修改这两项即可\n\n\t\t sudo ssserver -p 443 -k password -m aes-256-cfb --user nobody -d start //后台运行方法，修改同上\n\n\t\t sudo ssserver -d stop //停止运行\n\n\t\t sudo less /var/log/shadowsocks.log //检查日志\n\t\n** vi /etc/shadowsocks.json **\n\t\n\t{\n\t    \"server\":\"my_server_ip\",\n\t    \"server_port\":8388,\n\t    \"local_address\": \"127.0.0.1\",\n\t    \"local_port\":1080,\n\t    \"password\":\"mypassword\",\n\t    \"timeout\":300,\n\t    \"method\":\"aes-256-cfb\",\n\t    \"fast_open\": false\n    }\n\t    \n\t\tssserver -c /etc/shadowsocks.json //前台运行\n\n\t\tssserver -c /etc/shadowsocks.json -d start //后台运行\n\n\t\tssserver -c /etc/shadowsocks.json -d stop //停止\n\n\n### 6 几项检查命令 和一些error\n\t netstat -antpl|grep -i listen //查看服务器运行状态\n\n\t  chmod 600 ~/.ssh/authorized_keys //记住要设置文件为可读可写rw\n\t\n      ll ~/.ssh //查看文件的权限\n\t\n **[Error 98] Address already in use**\n \n\t 这个error应该是端口被占用了 修改shadowsocks.json中的端口\n\t \n\t  切记shadowsocks.json中的端口不要和ssh登录端口一样 这是不一样的\n\t \n**Permission denied(publishkey,gssapi-keyex,gssapi-with-mic)**\n\n\t使用ssh登录服务器报错 这个错误是公钥没有添加在authorized_keys中 \n\t\n     加进去就行\n\n### 7 如果以上都成功了 还不能翻墙 \n    请先检查一下自己是否开启了shadowsocks翻墙了 如果有关掉 然后重试\n     玩的开心\n     WTF GFW\n\n","slug":"新Mac-记一次修改shadowsocks过程","published":1,"updated":"2016-11-16T16:04:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civl4j4d50000jvdb4rxp1lp4","content":"<blockquote>\n<p> <strong>记住 确认是否已经登录服务器了 以下操作基本都是基于登录状态</strong> </p>\n</blockquote>\n<h3 id=\"1-使用ssh生成秘钥\"><a href=\"#1-使用ssh生成秘钥\" class=\"headerlink\" title=\"1.使用ssh生成秘钥\"></a>1.使用ssh生成秘钥</h3><pre><code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;\n</code></pre><ul>\n<li>然后会提示输入密钥的名字 比如输入 oktang</li>\n<li>注意要避免重复命名</li>\n<li>还要求输入私钥密码 password</li>\n</ul>\n<h3 id=\"2-配置本地ssh登录-需要修改config文件-添加服务器-用户名和端口信息\"><a href=\"#2-配置本地ssh登录-需要修改config文件-添加服务器-用户名和端口信息\" class=\"headerlink\" title=\"2.配置本地ssh登录 需要修改config文件 添加服务器 用户名和端口信息\"></a>2.配置本地ssh登录 需要修改config文件 添加服务器 用户名和端口信息</h3><pre><code>Host vultr\n     HostName 0.0.0.0 //自己的服务器地址\n     User user  //服务器用户名\n     Port 1080  //连接服务器的端口\n     IdentityFile ~/.ssh/oktang //私钥路径\n</code></pre><h3 id=\"3-将这个公钥oktang-pub添加到服务器上的authorization-keys中\"><a href=\"#3-将这个公钥oktang-pub添加到服务器上的authorization-keys中\" class=\"headerlink\" title=\"3.将这个公钥oktang.pub添加到服务器上的authorization.keys中\"></a>3.将这个公钥<em>oktang.pub</em>添加到服务器上的authorization.keys中</h3><ul>\n<li>authorization.keys这个文件如果没有就新生成一个</li>\n<li><p>使用ssh登录到服务器</p>\n<pre><code>ssh oktang\n cd ~/.ssh\n vi authorized_keys\n</code></pre></li>\n<li><p>将之前生成的公钥内容拷贝到authorized_keys中</p>\n</li>\n<li>ok</li>\n</ul>\n<h3 id=\"4-如果需要修改端口-使用ssh登录服务器\"><a href=\"#4-如果需要修改端口-使用ssh登录服务器\" class=\"headerlink\" title=\"4.如果需要修改端口 使用ssh登录服务器\"></a>4.如果需要修改端口 使用ssh登录服务器</h3><p>修改shadow socks中的端口 或者密码什么的</p>\n<pre><code>vi /etc/shadowsocks.json\n\n {\n     &quot;server&quot;:&quot;0.0.0.0”, //这里不用绑定你的服务器\n     &quot;server_port”:port, //这个是shadow socks端口 到时候客户端需要用的\n     &quot;local_address&quot;: &quot;127.0.0.1&quot;,\n     &quot;local_port&quot;:1080,\n     &quot;password”:&quot;password”,//shadowsocks密码\n     &quot;timeout&quot;:300,\n     &quot;method&quot;:&quot;aes-256-cfb&quot;,\n     &quot;fast_open&quot;: false\n }\n</code></pre><ul>\n<li><p>修改“server_port”:12345 即可</p>\n</li>\n<li><p>修改登录端口</p>\n<pre><code>cd /etc/ssh\n\n vi sshd_config \n</code></pre></li>\n<li><p>修改sshd_config中的Port端口 这个端口需要和ssh登录的端口一致 如果不一致ssh将会登录不了</p>\n</li>\n</ul>\n<h3 id=\"5-配置完成后-可以添加shadowsocks环境\"><a href=\"#5-配置完成后-可以添加shadowsocks环境\" class=\"headerlink\" title=\"5.配置完成后 可以添加shadowsocks环境\"></a>5.配置完成后 可以添加shadowsocks环境</h3><h4 id=\"在已经登录服务器的情况下-执行\"><a href=\"#在已经登录服务器的情况下-执行\" class=\"headerlink\" title=\" 在已经登录服务器的情况下 执行 \"></a><strong> 在已经登录服务器的情况下 执行 </strong></h4><pre><code>sudo pip install shadowsocks\n</code></pre><p><strong> 在没有/etc/shadowsocks.json配置文件的情况下  </strong></p>\n<pre><code>ssserver -h //查看所有参数\n\n ssserver -p 443 -k password -m aes-256-cfb //前台运行，443为服务器端口，password为密码，修改这两项即可\n\n sudo ssserver -p 443 -k password -m aes-256-cfb --user nobody -d start //后台运行方法，修改同上\n\n sudo ssserver -d stop //停止运行\n\n sudo less /var/log/shadowsocks.log //检查日志\n</code></pre><p><strong> vi /etc/shadowsocks.json </strong></p>\n<pre><code>{\n    &quot;server&quot;:&quot;my_server_ip&quot;,\n    &quot;server_port&quot;:8388,\n    &quot;local_address&quot;: &quot;127.0.0.1&quot;,\n    &quot;local_port&quot;:1080,\n    &quot;password&quot;:&quot;mypassword&quot;,\n    &quot;timeout&quot;:300,\n    &quot;method&quot;:&quot;aes-256-cfb&quot;,\n    &quot;fast_open&quot;: false\n}\n\n    ssserver -c /etc/shadowsocks.json //前台运行\n\n    ssserver -c /etc/shadowsocks.json -d start //后台运行\n\n    ssserver -c /etc/shadowsocks.json -d stop //停止\n</code></pre><h3 id=\"6-几项检查命令-和一些error\"><a href=\"#6-几项检查命令-和一些error\" class=\"headerlink\" title=\"6 几项检查命令 和一些error\"></a>6 几项检查命令 和一些error</h3><pre><code>netstat -antpl|grep -i listen //查看服务器运行状态\n\n chmod 600 ~/.ssh/authorized_keys //记住要设置文件为可读可写rw\n\n ll ~/.ssh //查看文件的权限\n</code></pre><p> <strong>[Error 98] Address already in use</strong></p>\n<pre><code>这个error应该是端口被占用了 修改shadowsocks.json中的端口\n\n 切记shadowsocks.json中的端口不要和ssh登录端口一样 这是不一样的\n</code></pre><p><strong>Permission denied(publishkey,gssapi-keyex,gssapi-with-mic)</strong></p>\n<pre><code>使用ssh登录服务器报错 这个错误是公钥没有添加在authorized_keys中 \n\n 加进去就行\n</code></pre><h3 id=\"7-如果以上都成功了-还不能翻墙\"><a href=\"#7-如果以上都成功了-还不能翻墙\" class=\"headerlink\" title=\"7 如果以上都成功了 还不能翻墙\"></a>7 如果以上都成功了 还不能翻墙</h3><pre><code>请先检查一下自己是否开启了shadowsocks翻墙了 如果有关掉 然后重试\n 玩的开心\n WTF GFW\n</code></pre>","excerpt":"","more":"<blockquote>\n<p> <strong>记住 确认是否已经登录服务器了 以下操作基本都是基于登录状态</strong> </p>\n</blockquote>\n<h3 id=\"1-使用ssh生成秘钥\"><a href=\"#1-使用ssh生成秘钥\" class=\"headerlink\" title=\"1.使用ssh生成秘钥\"></a>1.使用ssh生成秘钥</h3><pre><code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;\n</code></pre><ul>\n<li>然后会提示输入密钥的名字 比如输入 oktang</li>\n<li>注意要避免重复命名</li>\n<li>还要求输入私钥密码 password</li>\n</ul>\n<h3 id=\"2-配置本地ssh登录-需要修改config文件-添加服务器-用户名和端口信息\"><a href=\"#2-配置本地ssh登录-需要修改config文件-添加服务器-用户名和端口信息\" class=\"headerlink\" title=\"2.配置本地ssh登录 需要修改config文件 添加服务器 用户名和端口信息\"></a>2.配置本地ssh登录 需要修改config文件 添加服务器 用户名和端口信息</h3><pre><code>Host vultr\n     HostName 0.0.0.0 //自己的服务器地址\n     User user  //服务器用户名\n     Port 1080  //连接服务器的端口\n     IdentityFile ~/.ssh/oktang //私钥路径\n</code></pre><h3 id=\"3-将这个公钥oktang-pub添加到服务器上的authorization-keys中\"><a href=\"#3-将这个公钥oktang-pub添加到服务器上的authorization-keys中\" class=\"headerlink\" title=\"3.将这个公钥oktang.pub添加到服务器上的authorization.keys中\"></a>3.将这个公钥<em>oktang.pub</em>添加到服务器上的authorization.keys中</h3><ul>\n<li>authorization.keys这个文件如果没有就新生成一个</li>\n<li><p>使用ssh登录到服务器</p>\n<pre><code>ssh oktang\n cd ~/.ssh\n vi authorized_keys\n</code></pre></li>\n<li><p>将之前生成的公钥内容拷贝到authorized_keys中</p>\n</li>\n<li>ok</li>\n</ul>\n<h3 id=\"4-如果需要修改端口-使用ssh登录服务器\"><a href=\"#4-如果需要修改端口-使用ssh登录服务器\" class=\"headerlink\" title=\"4.如果需要修改端口 使用ssh登录服务器\"></a>4.如果需要修改端口 使用ssh登录服务器</h3><p>修改shadow socks中的端口 或者密码什么的</p>\n<pre><code>vi /etc/shadowsocks.json\n\n {\n     &quot;server&quot;:&quot;0.0.0.0”, //这里不用绑定你的服务器\n     &quot;server_port”:port, //这个是shadow socks端口 到时候客户端需要用的\n     &quot;local_address&quot;: &quot;127.0.0.1&quot;,\n     &quot;local_port&quot;:1080,\n     &quot;password”:&quot;password”,//shadowsocks密码\n     &quot;timeout&quot;:300,\n     &quot;method&quot;:&quot;aes-256-cfb&quot;,\n     &quot;fast_open&quot;: false\n }\n</code></pre><ul>\n<li><p>修改“server_port”:12345 即可</p>\n</li>\n<li><p>修改登录端口</p>\n<pre><code>cd /etc/ssh\n\n vi sshd_config \n</code></pre></li>\n<li><p>修改sshd_config中的Port端口 这个端口需要和ssh登录的端口一致 如果不一致ssh将会登录不了</p>\n</li>\n</ul>\n<h3 id=\"5-配置完成后-可以添加shadowsocks环境\"><a href=\"#5-配置完成后-可以添加shadowsocks环境\" class=\"headerlink\" title=\"5.配置完成后 可以添加shadowsocks环境\"></a>5.配置完成后 可以添加shadowsocks环境</h3><h4 id=\"在已经登录服务器的情况下-执行\"><a href=\"#在已经登录服务器的情况下-执行\" class=\"headerlink\" title=\" 在已经登录服务器的情况下 执行 \"></a><strong> 在已经登录服务器的情况下 执行 </strong></h4><pre><code>sudo pip install shadowsocks\n</code></pre><p><strong> 在没有/etc/shadowsocks.json配置文件的情况下  </strong></p>\n<pre><code>ssserver -h //查看所有参数\n\n ssserver -p 443 -k password -m aes-256-cfb //前台运行，443为服务器端口，password为密码，修改这两项即可\n\n sudo ssserver -p 443 -k password -m aes-256-cfb --user nobody -d start //后台运行方法，修改同上\n\n sudo ssserver -d stop //停止运行\n\n sudo less /var/log/shadowsocks.log //检查日志\n</code></pre><p><strong> vi /etc/shadowsocks.json </strong></p>\n<pre><code>{\n    &quot;server&quot;:&quot;my_server_ip&quot;,\n    &quot;server_port&quot;:8388,\n    &quot;local_address&quot;: &quot;127.0.0.1&quot;,\n    &quot;local_port&quot;:1080,\n    &quot;password&quot;:&quot;mypassword&quot;,\n    &quot;timeout&quot;:300,\n    &quot;method&quot;:&quot;aes-256-cfb&quot;,\n    &quot;fast_open&quot;: false\n}\n\n    ssserver -c /etc/shadowsocks.json //前台运行\n\n    ssserver -c /etc/shadowsocks.json -d start //后台运行\n\n    ssserver -c /etc/shadowsocks.json -d stop //停止\n</code></pre><h3 id=\"6-几项检查命令-和一些error\"><a href=\"#6-几项检查命令-和一些error\" class=\"headerlink\" title=\"6 几项检查命令 和一些error\"></a>6 几项检查命令 和一些error</h3><pre><code>netstat -antpl|grep -i listen //查看服务器运行状态\n\n chmod 600 ~/.ssh/authorized_keys //记住要设置文件为可读可写rw\n\n ll ~/.ssh //查看文件的权限\n</code></pre><p> <strong>[Error 98] Address already in use</strong></p>\n<pre><code>这个error应该是端口被占用了 修改shadowsocks.json中的端口\n\n 切记shadowsocks.json中的端口不要和ssh登录端口一样 这是不一样的\n</code></pre><p><strong>Permission denied(publishkey,gssapi-keyex,gssapi-with-mic)</strong></p>\n<pre><code>使用ssh登录服务器报错 这个错误是公钥没有添加在authorized_keys中 \n\n 加进去就行\n</code></pre><h3 id=\"7-如果以上都成功了-还不能翻墙\"><a href=\"#7-如果以上都成功了-还不能翻墙\" class=\"headerlink\" title=\"7 如果以上都成功了 还不能翻墙\"></a>7 如果以上都成功了 还不能翻墙</h3><pre><code>请先检查一下自己是否开启了shadowsocks翻墙了 如果有关掉 然后重试\n 玩的开心\n WTF GFW\n</code></pre>"},{"title":"Hexo 利用Github管理博客","date":"2016-08-26T10:49:55.000Z","_content":"\n# Hexo 利用Github管理博客\n\n\n### 1 搭建流程\n\n>配置环境\n安装homebrew node.js git \n申请Github\n算了这些就不写了。。。\n\n\n1. 在github上创建一个repo 起名必须规范 不用使用大写字母 像这样：[iostang.github.io](https://iostang.github.io)\n2. 创建两个分支 master · hexo\n3. 设置hexo为默认分支\n4. 使用git clone git@github.com:iostang/iostang.github.io.git 存放在自己想要管理博客的文件夹\n5. 在该目录下 依次使用\n\n\t\tsudo npm install -g hexo\n\t\thexo init\n\t\tnpm install \n\t\tnpm install hexo-deployer-git --save\n\t\t\n6. 修改_config.yml中的deploy参数\n\n\t\tdeploy:\n\t\ttype: git\n\t\trepo: git@github.com:iostang/iostang.github.io.git\n\t\tbranch: master\n\n7. hexo g 生成网站文件\n8. hexo s 这个时候就可以在本地查看博客了[http://localhost:4000](http://localhost:4000/)\n\n\t这个时候再点击http://localhost:4000，正常情况下应该是最原始的画面，但是我看到的是：\n\t白板和Cannot GET / 几个字\n\t\n\t原因：由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：\n\n\t\tnpm install hexo-renderer-ejs --save\n\t\tnpm install hexo-renderer-stylus --save\n\t\tnpm install hexo-renderer-marked --save\n\t\t\n\t**再次执行hexo g · hexo s**\n\n9. 依次执行 git add . git commit -m \"balabala\" git push origin hexo 提交相关文件到hexo分支\n10. 使用hexo g -d 生成网站并部署到github 注意提交到master分支上\n\n\n\n\n\t\t\n### 2 日常维护\n\n如果想写新的博客或者修改博客 你可以按照这个流程\n\n\t1. hexo n \"这是新博客的标题\"\n\t2. hexo g\n\t3. hexo s\n\t4. git add .\n\t5. git commit -m \"balabala\"\n\t6. git pull origin hexo \n\t7. git push origin hexo\n\t8. hexo d\n\n**ok 这个时候新博客已经部署到Github仓库了**\n\n\n### 3 如何管理 \n\n那如果我有多台电脑 该如何管理你的博客呢？\n\n\t1. git clone git@github.com:iostang/iostang.github.io.git\n\t2. sudo npm install -g hexo\n\t3. npm install hexo-renderer-ejs --save\n\t4. npm install hexo-renderer-stylus --save\n\t5. npm install hexo-renderer-marked --save\n\t6. npm install hexo-deployer-git --save\n\n千万不要执行**hexo init**这条指令 否则会覆盖_config.yml\n\n### 4 博客主题\n* 有了博客 当然想要一个风格好看你的主题 你可以去[这里](https://hexo.io/themes/)下载你喜欢的主题\n* 也可以使用[这个](https://github.com/pinggod/hexo-theme-apollo) 个人还蛮喜欢这种风格\n\t\n\t\tnpm install\n\t\tnpm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive\n\t\tgit clone https://github.com/pinggod/hexo-theme-apollo.git themes/apollo\n\t\t\n* 修改 _config.yml 的 theme 配置项为 apollo:\n\n\t\ttheme: apollo\n\n主题里面的内容就需要自己去配置了 比如微博账号\n    \n* 安装主题有一个小问题就是 在你提交到Github的时候 你需要先把该主题目录下的.git文件删掉 不然提交不上去\n\n","source":"_posts/Hexo-利用Github管理你的博客.md","raw":"\n---\ntitle: Hexo 利用Github管理博客\ndate: 2016-08-26 18:49:55\ntags: Hexo\n---\n\n# Hexo 利用Github管理博客\n\n\n### 1 搭建流程\n\n>配置环境\n安装homebrew node.js git \n申请Github\n算了这些就不写了。。。\n\n\n1. 在github上创建一个repo 起名必须规范 不用使用大写字母 像这样：[iostang.github.io](https://iostang.github.io)\n2. 创建两个分支 master · hexo\n3. 设置hexo为默认分支\n4. 使用git clone git@github.com:iostang/iostang.github.io.git 存放在自己想要管理博客的文件夹\n5. 在该目录下 依次使用\n\n\t\tsudo npm install -g hexo\n\t\thexo init\n\t\tnpm install \n\t\tnpm install hexo-deployer-git --save\n\t\t\n6. 修改_config.yml中的deploy参数\n\n\t\tdeploy:\n\t\ttype: git\n\t\trepo: git@github.com:iostang/iostang.github.io.git\n\t\tbranch: master\n\n7. hexo g 生成网站文件\n8. hexo s 这个时候就可以在本地查看博客了[http://localhost:4000](http://localhost:4000/)\n\n\t这个时候再点击http://localhost:4000，正常情况下应该是最原始的画面，但是我看到的是：\n\t白板和Cannot GET / 几个字\n\t\n\t原因：由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：\n\n\t\tnpm install hexo-renderer-ejs --save\n\t\tnpm install hexo-renderer-stylus --save\n\t\tnpm install hexo-renderer-marked --save\n\t\t\n\t**再次执行hexo g · hexo s**\n\n9. 依次执行 git add . git commit -m \"balabala\" git push origin hexo 提交相关文件到hexo分支\n10. 使用hexo g -d 生成网站并部署到github 注意提交到master分支上\n\n\n\n\n\t\t\n### 2 日常维护\n\n如果想写新的博客或者修改博客 你可以按照这个流程\n\n\t1. hexo n \"这是新博客的标题\"\n\t2. hexo g\n\t3. hexo s\n\t4. git add .\n\t5. git commit -m \"balabala\"\n\t6. git pull origin hexo \n\t7. git push origin hexo\n\t8. hexo d\n\n**ok 这个时候新博客已经部署到Github仓库了**\n\n\n### 3 如何管理 \n\n那如果我有多台电脑 该如何管理你的博客呢？\n\n\t1. git clone git@github.com:iostang/iostang.github.io.git\n\t2. sudo npm install -g hexo\n\t3. npm install hexo-renderer-ejs --save\n\t4. npm install hexo-renderer-stylus --save\n\t5. npm install hexo-renderer-marked --save\n\t6. npm install hexo-deployer-git --save\n\n千万不要执行**hexo init**这条指令 否则会覆盖_config.yml\n\n### 4 博客主题\n* 有了博客 当然想要一个风格好看你的主题 你可以去[这里](https://hexo.io/themes/)下载你喜欢的主题\n* 也可以使用[这个](https://github.com/pinggod/hexo-theme-apollo) 个人还蛮喜欢这种风格\n\t\n\t\tnpm install\n\t\tnpm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive\n\t\tgit clone https://github.com/pinggod/hexo-theme-apollo.git themes/apollo\n\t\t\n* 修改 _config.yml 的 theme 配置项为 apollo:\n\n\t\ttheme: apollo\n\n主题里面的内容就需要自己去配置了 比如微博账号\n    \n* 安装主题有一个小问题就是 在你提交到Github的时候 你需要先把该主题目录下的.git文件删掉 不然提交不上去\n\n","slug":"Hexo-利用Github管理你的博客","published":1,"updated":"2016-11-16T16:04:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civl4j4db0001jvdbjsilfuxa","content":"<h1 id=\"Hexo-利用Github管理博客\"><a href=\"#Hexo-利用Github管理博客\" class=\"headerlink\" title=\"Hexo 利用Github管理博客\"></a>Hexo 利用Github管理博客</h1><h3 id=\"1-搭建流程\"><a href=\"#1-搭建流程\" class=\"headerlink\" title=\"1 搭建流程\"></a>1 搭建流程</h3><blockquote>\n<p>配置环境<br>安装homebrew node.js git<br>申请Github<br>算了这些就不写了。。。</p>\n</blockquote>\n<ol>\n<li>在github上创建一个repo 起名必须规范 不用使用大写字母 像这样：<a href=\"https://iostang.github.io\" target=\"_blank\" rel=\"external\">iostang.github.io</a></li>\n<li>创建两个分支 master · hexo</li>\n<li>设置hexo为默认分支</li>\n<li>使用git clone git@github.com:iostang/iostang.github.io.git 存放在自己想要管理博客的文件夹</li>\n<li><p>在该目录下 依次使用</p>\n<pre><code>sudo npm install -g hexo\nhexo init\nnpm install \nnpm install hexo-deployer-git --save\n</code></pre></li>\n<li><p>修改_config.yml中的deploy参数</p>\n<pre><code>deploy:\ntype: git\nrepo: git@github.com:iostang/iostang.github.io.git\nbranch: master\n</code></pre></li>\n<li><p>hexo g 生成网站文件</p>\n</li>\n<li><p>hexo s 这个时候就可以在本地查看博客了<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000</a></p>\n<p> 这个时候再点击<a href=\"http://localhost:4000，正常情况下应该是最原始的画面，但是我看到的是：\" target=\"_blank\" rel=\"external\">http://localhost:4000，正常情况下应该是最原始的画面，但是我看到的是：</a><br> 白板和Cannot GET / 几个字</p>\n<p> 原因：由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：</p>\n<pre><code>npm install hexo-renderer-ejs --save\nnpm install hexo-renderer-stylus --save\nnpm install hexo-renderer-marked --save\n</code></pre><p> <strong>再次执行hexo g · hexo s</strong></p>\n</li>\n<li><p>依次执行 git add . git commit -m “balabala” git push origin hexo 提交相关文件到hexo分支</p>\n</li>\n<li>使用hexo g -d 生成网站并部署到github 注意提交到master分支上</li>\n</ol>\n<h3 id=\"2-日常维护\"><a href=\"#2-日常维护\" class=\"headerlink\" title=\"2 日常维护\"></a>2 日常维护</h3><p>如果想写新的博客或者修改博客 你可以按照这个流程</p>\n<pre><code>1. hexo n &quot;这是新博客的标题&quot;\n2. hexo g\n3. hexo s\n4. git add .\n5. git commit -m &quot;balabala&quot;\n6. git pull origin hexo \n7. git push origin hexo\n8. hexo d\n</code></pre><p><strong>ok 这个时候新博客已经部署到Github仓库了</strong></p>\n<h3 id=\"3-如何管理\"><a href=\"#3-如何管理\" class=\"headerlink\" title=\"3 如何管理\"></a>3 如何管理</h3><p>那如果我有多台电脑 该如何管理你的博客呢？</p>\n<pre><code>1. git clone git@github.com:iostang/iostang.github.io.git\n2. sudo npm install -g hexo\n3. npm install hexo-renderer-ejs --save\n4. npm install hexo-renderer-stylus --save\n5. npm install hexo-renderer-marked --save\n6. npm install hexo-deployer-git --save\n</code></pre><p>千万不要执行<strong>hexo init</strong>这条指令 否则会覆盖_config.yml</p>\n<h3 id=\"4-博客主题\"><a href=\"#4-博客主题\" class=\"headerlink\" title=\"4 博客主题\"></a>4 博客主题</h3><ul>\n<li>有了博客 当然想要一个风格好看你的主题 你可以去<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">这里</a>下载你喜欢的主题</li>\n<li><p>也可以使用<a href=\"https://github.com/pinggod/hexo-theme-apollo\" target=\"_blank\" rel=\"external\">这个</a> 个人还蛮喜欢这种风格</p>\n<pre><code>npm install\nnpm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive\ngit clone https://github.com/pinggod/hexo-theme-apollo.git themes/apollo\n</code></pre></li>\n<li><p>修改 _config.yml 的 theme 配置项为 apollo:</p>\n<pre><code>theme: apollo\n</code></pre></li>\n</ul>\n<p>主题里面的内容就需要自己去配置了 比如微博账号</p>\n<ul>\n<li>安装主题有一个小问题就是 在你提交到Github的时候 你需要先把该主题目录下的.git文件删掉 不然提交不上去</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Hexo-利用Github管理博客\"><a href=\"#Hexo-利用Github管理博客\" class=\"headerlink\" title=\"Hexo 利用Github管理博客\"></a>Hexo 利用Github管理博客</h1><h3 id=\"1-搭建流程\"><a href=\"#1-搭建流程\" class=\"headerlink\" title=\"1 搭建流程\"></a>1 搭建流程</h3><blockquote>\n<p>配置环境<br>安装homebrew node.js git<br>申请Github<br>算了这些就不写了。。。</p>\n</blockquote>\n<ol>\n<li>在github上创建一个repo 起名必须规范 不用使用大写字母 像这样：<a href=\"https://iostang.github.io\">iostang.github.io</a></li>\n<li>创建两个分支 master · hexo</li>\n<li>设置hexo为默认分支</li>\n<li>使用git clone git@github.com:iostang/iostang.github.io.git 存放在自己想要管理博客的文件夹</li>\n<li><p>在该目录下 依次使用</p>\n<pre><code>sudo npm install -g hexo\nhexo init\nnpm install \nnpm install hexo-deployer-git --save\n</code></pre></li>\n<li><p>修改_config.yml中的deploy参数</p>\n<pre><code>deploy:\ntype: git\nrepo: git@github.com:iostang/iostang.github.io.git\nbranch: master\n</code></pre></li>\n<li><p>hexo g 生成网站文件</p>\n</li>\n<li><p>hexo s 这个时候就可以在本地查看博客了<a href=\"http://localhost:4000/\">http://localhost:4000</a></p>\n<p> 这个时候再点击<a href=\"http://localhost:4000，正常情况下应该是最原始的画面，但是我看到的是：\">http://localhost:4000，正常情况下应该是最原始的画面，但是我看到的是：</a><br> 白板和Cannot GET / 几个字</p>\n<p> 原因：由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：</p>\n<pre><code>npm install hexo-renderer-ejs --save\nnpm install hexo-renderer-stylus --save\nnpm install hexo-renderer-marked --save\n</code></pre><p> <strong>再次执行hexo g · hexo s</strong></p>\n</li>\n<li><p>依次执行 git add . git commit -m “balabala” git push origin hexo 提交相关文件到hexo分支</p>\n</li>\n<li>使用hexo g -d 生成网站并部署到github 注意提交到master分支上</li>\n</ol>\n<h3 id=\"2-日常维护\"><a href=\"#2-日常维护\" class=\"headerlink\" title=\"2 日常维护\"></a>2 日常维护</h3><p>如果想写新的博客或者修改博客 你可以按照这个流程</p>\n<pre><code>1. hexo n &quot;这是新博客的标题&quot;\n2. hexo g\n3. hexo s\n4. git add .\n5. git commit -m &quot;balabala&quot;\n6. git pull origin hexo \n7. git push origin hexo\n8. hexo d\n</code></pre><p><strong>ok 这个时候新博客已经部署到Github仓库了</strong></p>\n<h3 id=\"3-如何管理\"><a href=\"#3-如何管理\" class=\"headerlink\" title=\"3 如何管理\"></a>3 如何管理</h3><p>那如果我有多台电脑 该如何管理你的博客呢？</p>\n<pre><code>1. git clone git@github.com:iostang/iostang.github.io.git\n2. sudo npm install -g hexo\n3. npm install hexo-renderer-ejs --save\n4. npm install hexo-renderer-stylus --save\n5. npm install hexo-renderer-marked --save\n6. npm install hexo-deployer-git --save\n</code></pre><p>千万不要执行<strong>hexo init</strong>这条指令 否则会覆盖_config.yml</p>\n<h3 id=\"4-博客主题\"><a href=\"#4-博客主题\" class=\"headerlink\" title=\"4 博客主题\"></a>4 博客主题</h3><ul>\n<li>有了博客 当然想要一个风格好看你的主题 你可以去<a href=\"https://hexo.io/themes/\">这里</a>下载你喜欢的主题</li>\n<li><p>也可以使用<a href=\"https://github.com/pinggod/hexo-theme-apollo\">这个</a> 个人还蛮喜欢这种风格</p>\n<pre><code>npm install\nnpm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive\ngit clone https://github.com/pinggod/hexo-theme-apollo.git themes/apollo\n</code></pre></li>\n<li><p>修改 _config.yml 的 theme 配置项为 apollo:</p>\n<pre><code>theme: apollo\n</code></pre></li>\n</ul>\n<p>主题里面的内容就需要自己去配置了 比如微博账号</p>\n<ul>\n<li>安装主题有一个小问题就是 在你提交到Github的时候 你需要先把该主题目录下的.git文件删掉 不然提交不上去</li>\n</ul>\n"},{"title":"配置Jenkins for iOS 记录一些问题点","date":"2016-09-26T09:24:46.000Z","_content":"\n## 1 源码管理\n\n*  Git源码管理问题\t\n\n\t\tRepository URL\t添加完git地址之后需要再添加一个ssh的私钥\n\t\n*  超时问题：\n\n\t\t 将Timeout (in minutes) for clone and fetch operations噶为60 默认为10 如果项目大的话可能会超时\n\n![](/images/sourceManager.png)\n\n\n## 2 构建触发器\n\n* 这一步比较简单 按固定格式填写就行\n\n\t\t比如：\n\t\t Build periodically H 20 * * *\n\t\t Poll SCM H/5 * * * *\n\n![](/images/BuildTrigger.png)\t\t\n\t\t\n\t\t\n## 3 构建环境\n\n   * 这个需要配置证书和描述文件 以及输出路径  配置证书这部分就不细说了 网上很多资料\n   \n![](/images/BuildEnv.png)\t\n\n* [手把手教你利用Jenkins持续集成iOS项目](http://www.jianshu.com/p/41ecb06ae95f)\n\n* [CI第一篇:Jenkins+github->fir.im/蒲公英pgyer.com](http://www.jianshu.com/p/a501153c9d59)\n\n* [CI第二篇 集成项目(SVN)workspace编译生成ipa到fir-蒲公英(jenkins)](http://www.jianshu.com/p/12e445c0d4ee)\n\n* [Jenkins+GitHub+Xcode+fir搭了一个持续集成环境](http://www.jianshu.com/p/a17167274463)\n\n\t\n## 4 构建\n\t\n* 有一个小坑 \n\n\t针对非cocoapods项目 就是如果你的项目结构比较复杂 在build的时候可能会出现error\n\t\n\t\txcodebuild: error: '/Users/Shared/Jenkins/Home/jobs/Jiuai/workspace/YouXian/YouXian' is not a project file.\n\t\t\n\t这个问题是由于你\tXcode Project File 这个选项没有指定xcodeproj导致的 将Xcode Project File设置成你的xcodeproj文件路径\n\t\n\t\t${WORKSPACE}/YouXian/YouXian.xcodeproj\n\t\n![](/images/Advanced Xcode build options.png)\n\n\t\n## 5 构建后操作\n\n* 生成ipa之后可以利用fir或者pgyer上传 填好Token就行了\n* 要是有能力写脚本也行\n\n\n## 6 The following build commands failed: Check dependencies\n\n\t\n* Jenkins 集成Xcode 项目的时候在证书上遇到了问题\n\t\n\t    Check dependencies\n\t\t Code Sign error: No codesigning identities found: No codesigning identities (i.e. certificate and private key pairs) \t\t that \t\n\t\t match the provisioning profile specified in your build settings (“qingyunDeveloper”) were found.\n\n* 如果遇到类似的错误 解决办法：\n\n\t\t1 打开keychain keys 找到apple 的开发者证书。然后复制。 \n\t\t 2 选择左边的系统（system）把刚复制的证书放进去。\n\t\t\n* 如果这个还没有解决 接下来第二步：\n\n\t\t1 找到你用户下的Provisioning Profiles 文件。目录为 /Users/xxx/Library/MobileDevice/Provisioning Profiles  \n\t\t xxx表示你自己的用户名\n\t\t 2 把这里面所有的证书复制到/Users/Shared/Jenkins/Library/MobileDevice/Provisioning Profile 这个文件夹下\n\n\n* 最后提示\n\t\t\n\t\tiPhone.build/ProjectCos.xcent /Users/chenqing/Sqy/iOSProject/cyou/Svn/Cos/CosXCode_lxh/build/ProjectCos.app\n\n\t\t ** BUILD SUCCEEDED **\n\n\t\t Finished: SUCCESS\n\t\n\t[链接： Jenkins Xcode 证书设置错误 Code Sign error: No matching codesigning identity found: No codesigning identities\n](http://www.cnblogs.com/qingjoin/p/3929493.html)\n\n\n## 7 注意点\n\n* 关于证书问题还有一个注意点 \n\t\t\n\t\t如果你是一个测试项目 \n\t\t 在本地配置好证书和描述文件后一定要上传到github或者服务器上 \n\t\t 然后在进行构建 否则肯定会构建失败的  \n\t\t 因为jenkins是拉取你远端代码仓库的最新代码 \n\t\t 如果只在本地配置不上传 必然构建失败 \n\t\t 这也是一个比较基础的问题 \n\n\t","source":"_posts/配置Jenkins-for-iOS-记录一些问题点.md","raw":"---\ntitle: 配置Jenkins for iOS 记录一些问题点\ndate: 2016-09-26 17:24:46\ntags: Jenkins\n---\n\n## 1 源码管理\n\n*  Git源码管理问题\t\n\n\t\tRepository URL\t添加完git地址之后需要再添加一个ssh的私钥\n\t\n*  超时问题：\n\n\t\t 将Timeout (in minutes) for clone and fetch operations噶为60 默认为10 如果项目大的话可能会超时\n\n![](/images/sourceManager.png)\n\n\n## 2 构建触发器\n\n* 这一步比较简单 按固定格式填写就行\n\n\t\t比如：\n\t\t Build periodically H 20 * * *\n\t\t Poll SCM H/5 * * * *\n\n![](/images/BuildTrigger.png)\t\t\n\t\t\n\t\t\n## 3 构建环境\n\n   * 这个需要配置证书和描述文件 以及输出路径  配置证书这部分就不细说了 网上很多资料\n   \n![](/images/BuildEnv.png)\t\n\n* [手把手教你利用Jenkins持续集成iOS项目](http://www.jianshu.com/p/41ecb06ae95f)\n\n* [CI第一篇:Jenkins+github->fir.im/蒲公英pgyer.com](http://www.jianshu.com/p/a501153c9d59)\n\n* [CI第二篇 集成项目(SVN)workspace编译生成ipa到fir-蒲公英(jenkins)](http://www.jianshu.com/p/12e445c0d4ee)\n\n* [Jenkins+GitHub+Xcode+fir搭了一个持续集成环境](http://www.jianshu.com/p/a17167274463)\n\n\t\n## 4 构建\n\t\n* 有一个小坑 \n\n\t针对非cocoapods项目 就是如果你的项目结构比较复杂 在build的时候可能会出现error\n\t\n\t\txcodebuild: error: '/Users/Shared/Jenkins/Home/jobs/Jiuai/workspace/YouXian/YouXian' is not a project file.\n\t\t\n\t这个问题是由于你\tXcode Project File 这个选项没有指定xcodeproj导致的 将Xcode Project File设置成你的xcodeproj文件路径\n\t\n\t\t${WORKSPACE}/YouXian/YouXian.xcodeproj\n\t\n![](/images/Advanced Xcode build options.png)\n\n\t\n## 5 构建后操作\n\n* 生成ipa之后可以利用fir或者pgyer上传 填好Token就行了\n* 要是有能力写脚本也行\n\n\n## 6 The following build commands failed: Check dependencies\n\n\t\n* Jenkins 集成Xcode 项目的时候在证书上遇到了问题\n\t\n\t    Check dependencies\n\t\t Code Sign error: No codesigning identities found: No codesigning identities (i.e. certificate and private key pairs) \t\t that \t\n\t\t match the provisioning profile specified in your build settings (“qingyunDeveloper”) were found.\n\n* 如果遇到类似的错误 解决办法：\n\n\t\t1 打开keychain keys 找到apple 的开发者证书。然后复制。 \n\t\t 2 选择左边的系统（system）把刚复制的证书放进去。\n\t\t\n* 如果这个还没有解决 接下来第二步：\n\n\t\t1 找到你用户下的Provisioning Profiles 文件。目录为 /Users/xxx/Library/MobileDevice/Provisioning Profiles  \n\t\t xxx表示你自己的用户名\n\t\t 2 把这里面所有的证书复制到/Users/Shared/Jenkins/Library/MobileDevice/Provisioning Profile 这个文件夹下\n\n\n* 最后提示\n\t\t\n\t\tiPhone.build/ProjectCos.xcent /Users/chenqing/Sqy/iOSProject/cyou/Svn/Cos/CosXCode_lxh/build/ProjectCos.app\n\n\t\t ** BUILD SUCCEEDED **\n\n\t\t Finished: SUCCESS\n\t\n\t[链接： Jenkins Xcode 证书设置错误 Code Sign error: No matching codesigning identity found: No codesigning identities\n](http://www.cnblogs.com/qingjoin/p/3929493.html)\n\n\n## 7 注意点\n\n* 关于证书问题还有一个注意点 \n\t\t\n\t\t如果你是一个测试项目 \n\t\t 在本地配置好证书和描述文件后一定要上传到github或者服务器上 \n\t\t 然后在进行构建 否则肯定会构建失败的  \n\t\t 因为jenkins是拉取你远端代码仓库的最新代码 \n\t\t 如果只在本地配置不上传 必然构建失败 \n\t\t 这也是一个比较基础的问题 \n\n\t","slug":"配置Jenkins-for-iOS-记录一些问题点","published":1,"updated":"2016-11-16T16:04:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civl4j4p50006jvdbyb3qnuvc","content":"<h2 id=\"1-源码管理\"><a href=\"#1-源码管理\" class=\"headerlink\" title=\"1 源码管理\"></a>1 源码管理</h2><ul>\n<li><p>Git源码管理问题    </p>\n<pre><code>Repository URL    添加完git地址之后需要再添加一个ssh的私钥\n</code></pre></li>\n<li><p>超时问题：</p>\n<pre><code>将Timeout (in minutes) for clone and fetch operations噶为60 默认为10 如果项目大的话可能会超时\n</code></pre></li>\n</ul>\n<p><img src=\"/images/sourceManager.png\" alt=\"\"></p>\n<h2 id=\"2-构建触发器\"><a href=\"#2-构建触发器\" class=\"headerlink\" title=\"2 构建触发器\"></a>2 构建触发器</h2><ul>\n<li><p>这一步比较简单 按固定格式填写就行</p>\n<pre><code>比如：\n Build periodically H 20 * * *\n Poll SCM H/5 * * * *\n</code></pre></li>\n</ul>\n<p><img src=\"/images/BuildTrigger.png\" alt=\"\">        </p>\n<h2 id=\"3-构建环境\"><a href=\"#3-构建环境\" class=\"headerlink\" title=\"3 构建环境\"></a>3 构建环境</h2><ul>\n<li>这个需要配置证书和描述文件 以及输出路径  配置证书这部分就不细说了 网上很多资料</li>\n</ul>\n<p><img src=\"/images/BuildEnv.png\" alt=\"\">    </p>\n<ul>\n<li><p><a href=\"http://www.jianshu.com/p/41ecb06ae95f\" target=\"_blank\" rel=\"external\">手把手教你利用Jenkins持续集成iOS项目</a></p>\n</li>\n<li><p><a href=\"http://www.jianshu.com/p/a501153c9d59\" target=\"_blank\" rel=\"external\">CI第一篇:Jenkins+github-&gt;fir.im/蒲公英pgyer.com</a></p>\n</li>\n<li><p><a href=\"http://www.jianshu.com/p/12e445c0d4ee\" target=\"_blank\" rel=\"external\">CI第二篇 集成项目(SVN)workspace编译生成ipa到fir-蒲公英(jenkins)</a></p>\n</li>\n<li><p><a href=\"http://www.jianshu.com/p/a17167274463\" target=\"_blank\" rel=\"external\">Jenkins+GitHub+Xcode+fir搭了一个持续集成环境</a></p>\n</li>\n</ul>\n<h2 id=\"4-构建\"><a href=\"#4-构建\" class=\"headerlink\" title=\"4 构建\"></a>4 构建</h2><ul>\n<li><p>有一个小坑 </p>\n<p>  针对非cocoapods项目 就是如果你的项目结构比较复杂 在build的时候可能会出现error</p>\n<pre><code>xcodebuild: error: &apos;/Users/Shared/Jenkins/Home/jobs/Jiuai/workspace/YouXian/YouXian&apos; is not a project file.\n</code></pre><p>  这个问题是由于你    Xcode Project File 这个选项没有指定xcodeproj导致的 将Xcode Project File设置成你的xcodeproj文件路径</p>\n<pre><code>${WORKSPACE}/YouXian/YouXian.xcodeproj\n</code></pre></li>\n</ul>\n<p><img src=\"/images/Advanced Xcode build options.png\" alt=\"\"></p>\n<h2 id=\"5-构建后操作\"><a href=\"#5-构建后操作\" class=\"headerlink\" title=\"5 构建后操作\"></a>5 构建后操作</h2><ul>\n<li>生成ipa之后可以利用fir或者pgyer上传 填好Token就行了</li>\n<li>要是有能力写脚本也行</li>\n</ul>\n<h2 id=\"6-The-following-build-commands-failed-Check-dependencies\"><a href=\"#6-The-following-build-commands-failed-Check-dependencies\" class=\"headerlink\" title=\"6 The following build commands failed: Check dependencies\"></a>6 The following build commands failed: Check dependencies</h2><ul>\n<li><p>Jenkins 集成Xcode 项目的时候在证书上遇到了问题</p>\n<pre><code>Check dependencies\n Code Sign error: No codesigning identities found: No codesigning identities (i.e. certificate and private key pairs)          that     \n match the provisioning profile specified in your build settings (“qingyunDeveloper”) were found.\n</code></pre></li>\n<li><p>如果遇到类似的错误 解决办法：</p>\n<pre><code>1 打开keychain keys 找到apple 的开发者证书。然后复制。 \n 2 选择左边的系统（system）把刚复制的证书放进去。\n</code></pre></li>\n<li><p>如果这个还没有解决 接下来第二步：</p>\n<pre><code>1 找到你用户下的Provisioning Profiles 文件。目录为 /Users/xxx/Library/MobileDevice/Provisioning Profiles  \n xxx表示你自己的用户名\n 2 把这里面所有的证书复制到/Users/Shared/Jenkins/Library/MobileDevice/Provisioning Profile 这个文件夹下\n</code></pre></li>\n</ul>\n<ul>\n<li><p>最后提示</p>\n<pre><code>iPhone.build/ProjectCos.xcent /Users/chenqing/Sqy/iOSProject/cyou/Svn/Cos/CosXCode_lxh/build/ProjectCos.app\n\n ** BUILD SUCCEEDED **\n\n Finished: SUCCESS\n</code></pre><p>  <a href=\"http://www.cnblogs.com/qingjoin/p/3929493.html\" target=\"_blank\" rel=\"external\">链接： Jenkins Xcode 证书设置错误 Code Sign error: No matching codesigning identity found: No codesigning identities\n</a></p>\n</li>\n</ul>\n<h2 id=\"7-注意点\"><a href=\"#7-注意点\" class=\"headerlink\" title=\"7 注意点\"></a>7 注意点</h2><ul>\n<li><p>关于证书问题还有一个注意点 </p>\n<pre><code>如果你是一个测试项目 \n 在本地配置好证书和描述文件后一定要上传到github或者服务器上 \n 然后在进行构建 否则肯定会构建失败的  \n 因为jenkins是拉取你远端代码仓库的最新代码 \n 如果只在本地配置不上传 必然构建失败 \n 这也是一个比较基础的问题 \n</code></pre></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"1-源码管理\"><a href=\"#1-源码管理\" class=\"headerlink\" title=\"1 源码管理\"></a>1 源码管理</h2><ul>\n<li><p>Git源码管理问题    </p>\n<pre><code>Repository URL    添加完git地址之后需要再添加一个ssh的私钥\n</code></pre></li>\n<li><p>超时问题：</p>\n<pre><code>将Timeout (in minutes) for clone and fetch operations噶为60 默认为10 如果项目大的话可能会超时\n</code></pre></li>\n</ul>\n<p><img src=\"/images/sourceManager.png\" alt=\"\"></p>\n<h2 id=\"2-构建触发器\"><a href=\"#2-构建触发器\" class=\"headerlink\" title=\"2 构建触发器\"></a>2 构建触发器</h2><ul>\n<li><p>这一步比较简单 按固定格式填写就行</p>\n<pre><code>比如：\n Build periodically H 20 * * *\n Poll SCM H/5 * * * *\n</code></pre></li>\n</ul>\n<p><img src=\"/images/BuildTrigger.png\" alt=\"\">        </p>\n<h2 id=\"3-构建环境\"><a href=\"#3-构建环境\" class=\"headerlink\" title=\"3 构建环境\"></a>3 构建环境</h2><ul>\n<li>这个需要配置证书和描述文件 以及输出路径  配置证书这部分就不细说了 网上很多资料</li>\n</ul>\n<p><img src=\"/images/BuildEnv.png\" alt=\"\">    </p>\n<ul>\n<li><p><a href=\"http://www.jianshu.com/p/41ecb06ae95f\">手把手教你利用Jenkins持续集成iOS项目</a></p>\n</li>\n<li><p><a href=\"http://www.jianshu.com/p/a501153c9d59\">CI第一篇:Jenkins+github-&gt;fir.im/蒲公英pgyer.com</a></p>\n</li>\n<li><p><a href=\"http://www.jianshu.com/p/12e445c0d4ee\">CI第二篇 集成项目(SVN)workspace编译生成ipa到fir-蒲公英(jenkins)</a></p>\n</li>\n<li><p><a href=\"http://www.jianshu.com/p/a17167274463\">Jenkins+GitHub+Xcode+fir搭了一个持续集成环境</a></p>\n</li>\n</ul>\n<h2 id=\"4-构建\"><a href=\"#4-构建\" class=\"headerlink\" title=\"4 构建\"></a>4 构建</h2><ul>\n<li><p>有一个小坑 </p>\n<p>  针对非cocoapods项目 就是如果你的项目结构比较复杂 在build的时候可能会出现error</p>\n<pre><code>xcodebuild: error: &apos;/Users/Shared/Jenkins/Home/jobs/Jiuai/workspace/YouXian/YouXian&apos; is not a project file.\n</code></pre><p>  这个问题是由于你    Xcode Project File 这个选项没有指定xcodeproj导致的 将Xcode Project File设置成你的xcodeproj文件路径</p>\n<pre><code>${WORKSPACE}/YouXian/YouXian.xcodeproj\n</code></pre></li>\n</ul>\n<p><img src=\"/images/Advanced Xcode build options.png\" alt=\"\"></p>\n<h2 id=\"5-构建后操作\"><a href=\"#5-构建后操作\" class=\"headerlink\" title=\"5 构建后操作\"></a>5 构建后操作</h2><ul>\n<li>生成ipa之后可以利用fir或者pgyer上传 填好Token就行了</li>\n<li>要是有能力写脚本也行</li>\n</ul>\n<h2 id=\"6-The-following-build-commands-failed-Check-dependencies\"><a href=\"#6-The-following-build-commands-failed-Check-dependencies\" class=\"headerlink\" title=\"6 The following build commands failed: Check dependencies\"></a>6 The following build commands failed: Check dependencies</h2><ul>\n<li><p>Jenkins 集成Xcode 项目的时候在证书上遇到了问题</p>\n<pre><code>Check dependencies\n Code Sign error: No codesigning identities found: No codesigning identities (i.e. certificate and private key pairs)          that     \n match the provisioning profile specified in your build settings (“qingyunDeveloper”) were found.\n</code></pre></li>\n<li><p>如果遇到类似的错误 解决办法：</p>\n<pre><code>1 打开keychain keys 找到apple 的开发者证书。然后复制。 \n 2 选择左边的系统（system）把刚复制的证书放进去。\n</code></pre></li>\n<li><p>如果这个还没有解决 接下来第二步：</p>\n<pre><code>1 找到你用户下的Provisioning Profiles 文件。目录为 /Users/xxx/Library/MobileDevice/Provisioning Profiles  \n xxx表示你自己的用户名\n 2 把这里面所有的证书复制到/Users/Shared/Jenkins/Library/MobileDevice/Provisioning Profile 这个文件夹下\n</code></pre></li>\n</ul>\n<ul>\n<li><p>最后提示</p>\n<pre><code>iPhone.build/ProjectCos.xcent /Users/chenqing/Sqy/iOSProject/cyou/Svn/Cos/CosXCode_lxh/build/ProjectCos.app\n\n ** BUILD SUCCEEDED **\n\n Finished: SUCCESS\n</code></pre><p>  <a href=\"http://www.cnblogs.com/qingjoin/p/3929493.html\">链接： Jenkins Xcode 证书设置错误 Code Sign error: No matching codesigning identity found: No codesigning identities\n</a></p>\n</li>\n</ul>\n<h2 id=\"7-注意点\"><a href=\"#7-注意点\" class=\"headerlink\" title=\"7 注意点\"></a>7 注意点</h2><ul>\n<li><p>关于证书问题还有一个注意点 </p>\n<pre><code>如果你是一个测试项目 \n 在本地配置好证书和描述文件后一定要上传到github或者服务器上 \n 然后在进行构建 否则肯定会构建失败的  \n 因为jenkins是拉取你远端代码仓库的最新代码 \n 如果只在本地配置不上传 必然构建失败 \n 这也是一个比较基础的问题 \n</code></pre></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"civl4j4d50000jvdb4rxp1lp4","tag_id":"civl4j4df0002jvdbqyz4bcgi","_id":"civl4j4di0004jvdb8msyz37i"},{"post_id":"civl4j4db0001jvdbjsilfuxa","tag_id":"civl4j4dh0003jvdbg8vswzu7","_id":"civl4j4di0005jvdbncjx2lq2"},{"post_id":"civl4j4p50006jvdbyb3qnuvc","tag_id":"civl4j4p70007jvdbtnk81jar","_id":"civl4j4p90008jvdbg8cb4za0"}],"Tag":[{"name":"shadowsocks","_id":"civl4j4df0002jvdbqyz4bcgi"},{"name":"Hexo","_id":"civl4j4dh0003jvdbg8vswzu7"},{"name":"Jenkins","_id":"civl4j4p70007jvdbtnk81jar"}]}}